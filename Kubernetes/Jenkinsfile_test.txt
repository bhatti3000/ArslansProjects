pipeline {
  agent any
  options { timestamps() }

  parameters {
    string(name: 'ACR_LOGIN_SERVER',
           defaultValue: 'myregistry.azurecr.io',
           description: 'Your ACR login server, e.g. myregistry.azurecr.io')

    // Create a Jenkins credential (Kind: Username with password) that can docker-login to ACR,
    // then set its ID as the defaultValue below (e.g., "acr-creds")
    credentials(name: 'ACR_CREDENTIALS',
                defaultValue: 'acr-creds',
                description: 'Username/Password that can docker login to ACR',
                credentialType: 'com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl')
  }

  environment {
    TEST_REPO = 'jenkins-acr-smoketest'
    TEST_TAG  = "build-${env.BUILD_NUMBER}"
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Tooling check') {
      steps {
        sh '''
          set -e
          docker --version
          echo "Docker is available on this agent."
        '''
      }
    }

    stage('Login to ACR') {
      steps {
        withCredentials([usernamePassword(
          credentialsId: params.ACR_CREDENTIALS,
          usernameVariable: 'REG_USER',
          passwordVariable: 'REG_PASS'
        )]) {
          sh '''
            set -euo pipefail
            echo "$REG_PASS" | docker login "${ACR_LOGIN_SERVER}" --username "$REG_USER" --password-stdin
            echo "Authenticated to ${ACR_LOGIN_SERVER}"
          '''
        }
      }
    }

    stage('Push & Pull smoke test') {
      steps {
        sh '''
          set -euo pipefail

          # Use a tiny base image; change if your environment restricts public pulls
          BASE_IMAGE=busybox:latest

          echo "Pulling base image: ${BASE_IMAGE}"
          docker pull "${BASE_IMAGE}"

          TARGET_IMAGE="${ACR_LOGIN_SERVER}/${TEST_REPO}:${TEST_TAG}"
          echo "Tagging as ${TARGET_IMAGE}"
          docker tag "${BASE_IMAGE}" "${TARGET_IMAGE}"

          echo "Pushing ${TARGET_IMAGE}"
          docker push "${TARGET_IMAGE}"

          echo "Pulling back ${TARGET_IMAGE} to verify accessibility"
          docker pull "${TARGET_IMAGE}"

          echo "ACR push/pull verification succeeded for ${TARGET_IMAGE}"
        '''
      }
    }

    stage('Cleanup (local)') {
      steps {
        sh '''
          set -e
          TARGET_IMAGE="${ACR_LOGIN_SERVER}/${TEST_REPO}:${TEST_TAG}"
          docker rmi -f "${TARGET_IMAGE}" || true
        '''
      }
    }
  }

  post {
    always {
      // Try to log out regardless of stage outcome
      sh '''
        docker logout "${ACR_LOGIN_SERVER}" || true
      '''
      echo 'Pipeline finished.'
    }
    success {
      echo 'ACR connectivity & auth: OK (push/pull succeeded).'
    }
    failure {
      echo 'ACR connectivity/auth test failed. Check previous stage logs.'
    }
  }
}
