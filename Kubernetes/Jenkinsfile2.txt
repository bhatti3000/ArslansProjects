pipeline {
  agent any
  options { timestamps(); parallelsAlwaysFailFast() }   // stop other branches if one fails

  environment {
    IMG_TAG   = "build-${env.BUILD_NUMBER}"
    BASE_DIR  = 'Kubernetes'      // change to '' if your Dockerfiles are at repo root
    APP_DIR   = 'AppHTML'         // service dirs live under BASE_DIR/APP_DIR
  }

  stages {
    stage('Checkout') {
      steps { checkout scm }
    }

    stage('Tooling check') {
      steps {
        sh '''
          set -e
          docker --version
          echo "Docker OK"
        '''
      }
    }

    stage('Login to ACR') {
      steps {
        withCredentials([usernamePassword(
          credentialsId: params.ACR_CREDENTIALS,
          usernameVariable: 'REG_USER',
          passwordVariable: 'REG_PASS'
        )]) {
          sh '''
            set -eu
            echo "$REG_PASS" | docker login "${ACR_LOGIN_SERVER}" --username "$REG_USER" --password-stdin
            echo "Authenticated to ${ACR_LOGIN_SERVER}"
          '''
        }
      }
    }

    stage('Build & Push images (parallel)') {
      parallel {
        stage('vote') {
          steps {
            dir(env.BASE_DIR) {
              sh '''
                set -eu
                test -d "${APP_DIR}/vote" || { echo "Missing ${APP_DIR}/vote"; exit 1; }
                docker build -f "${APP_DIR}/vote/Dockerfile" \
                  -t "${ACR_LOGIN_SERVER}/vote:${IMG_TAG}" \
                  -t "${ACR_LOGIN_SERVER}/vote:latest" \
                  "${APP_DIR}/vote"
                docker push "${ACR_LOGIN_SERVER}/vote:${IMG_TAG}"
                docker push "${ACR_LOGIN_SERVER}/vote:latest"
              '''
            }
          }
        }
        stage('worker') {
          steps {
            dir(env.BASE_DIR) {
              sh '''
                set -eu
                test -d "${APP_DIR}/worker" || { echo "Missing ${APP_DIR}/worker"; exit 1; }
                docker build -f "${APP_DIR}/worker/Dockerfile" \
                  -t "${ACR_LOGIN_SERVER}/worker:${IMG_TAG}" \
                  -t "${ACR_LOGIN_SERVER}/worker:latest" \
                  "${APP_DIR}/worker"
                docker push "${ACR_LOGIN_SERVER}/worker:${IMG_TAG}"
                docker push "${ACR_LOGIN_SERVER}/worker:latest"
              '''
            }
          }
        }
        stage('result') {
          steps {
            dir(env.BASE_DIR) {
              sh '''
                set -eu
                test -d "${APP_DIR}/result" || { echo "Missing ${APP_DIR}/result"; exit 1; }
                docker build -f "${APP_DIR}/result/Dockerfile" \
                  -t "${ACR_LOGIN_SERVER}/result:${IMG_TAG}" \
                  -t "${ACR_LOGIN_SERVER}/result:latest" \
                  "${APP_DIR}/result"
                docker push "${ACR_LOGIN_SERVER}/result:${IMG_TAG}"
                docker push "${ACR_LOGIN_SERVER}/result:latest"
              '''
            }
          }
        }
      }
    }
  }

  post {
    always {
      sh '''
        docker logout "${ACR_LOGIN_SERVER}" || true
        docker image prune -f || true
      '''
      echo 'Pipeline finished.'
    }
    success { echo '✅ ACR build & push succeeded for vote/worker/result.' }
    failure { echo '❌ Pipeline FAILED. Most common cause: wrong paths. See stage logs.' }
  }
}